react-nartive代码使用规范：
	1、自定义一个组件的时候可以在构造方法里边进行一些初始化操作：
		像这样：
	constructor(props){
		super(props);
		//this.state = {text:''};
		const ds = new ListView.DataSource({rowHasChanged:(r1,r2)=> r1 !==r2});
		this.state = {dataSource:ds.cloneWithRows(['非花非雾','霸天下','雄霸','土豆','唐家萨斯','诺克萨斯','德玛西亚','泽拉斯'])
		};
	}	
	
	2、要是react-native 中或者别的第三方的组件必须要将他下载到 项目根目录下的
	node_modules文件夹下边。
	
		使用的时候通过使用Es6 的导入方式：
		
		import Toast from 'react-native-root-toast';
		
		导入react-native 的组件用这样的方式：
		import {
			AppRegistry,
			StyleSheet,
			Text,
			Image,
			View,
			DrawerLayoutAndroid,
			ProgressBarAndroid,
			ScrollView,
			TouchableHighlight,
			TextInput,
			ListView
		} from 'react-native';
		
		导入 Component 组件基类：
		import React, { Component } from 'react';//导入react的组件。
		
	3、在 index_android.js中使用别的js文件的方式：
		a、如果跟index_android.js在同一目录下：
		按下边的导入方式。
			import MyScene from './MyScene';
		b、如果在别的目录下边可以这样：
		import MyScene from './androidjs/MyScene';
		androidjs就是后边的文件所放置的文件夹名称。
		
	3、基础布局的使用：
		基础布局的使用类似xml布局+ html布局
		
		实现一个基础的布局只需要使用导入的控件，然后设置样式就可以了。
		实例：
		
		<View style={styles.row}>
					<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
				 <View  style={styles.text}> 
					<Text style={styles.title}>
						一行白鹭上青天！
					</Text>
					
					<Text style = {styles.subtitle}>
						窗含西岭千秋雪！
					</Text>
				</View>
		
		
		样式的设置有俩种方式：
		
		a、直接在控件里边设置，像这样：
			<Text style={{height:80,flex:1,justifyContent:'center'}}}>
						一行白鹭上青天！
					</Text>
					
		b、使用
		const styles = StyleSheet.create({
				text:{
					flex:1,
					justifyContent:'center',
					},
		});
		
		创建样式集合，然后使用的时候直接调用：
		
		<Text style={styles.title}>
						一行白鹭上青天！
					</Text>
					
					
	3、基本控件使用：
		Text：文本控件，用来显示文本，写法跟html相似
			使用方式：<Text>'欢迎使用React-native'</Text>
		View：一个容器控件，里边可以包含
			使用方式：
			 <View style={styles.row}>
					<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
			</View>
			
		Image：图片控件
			使用方式：要注意要设置他的高宽，要不可能啥也看不到啊
			<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
		ScrollView:类似android中的scrollView，也是一个容器，但是没有事件冲突啊
		
			使用方式：既然是一个容器那么就是在他里边添加控件了
			<ScrollView >
			 <View style={styles.row}>
					<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
					<View style={styles.row}>
					<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
					<View style={styles.row}>
					<Image  source={{uri:'http://pic9.nipic.com/20100906/1295091_134639124058_2.jpg'}}
							style={styles.image}
					/>
			</View>
			</ScrollView>
			
		TextInput:处理文本的输入，类似android中的EditView。
		Toast:类似android中的toast，要是用这个控件需要下载Toast库的支持
		ProgressBarAndroid:专为android提供的一个进度条
		DrawerLayoutAndroid:专门为android提供的一个抽屉布局组件
		ListView:用来显示相同样式数据的控件，跟android中listView使用类似
			首先初始化listView的数据源，然后就是在布局中使用，
			我的这个初始化是在构造方法中进行的：
			constructor(props){
				super(props);
				const ds = new ListView.DataSource({rowHasChanged:(r1,r2)=> r1 !==r2});
				this.state = {dataSource:ds.cloneWithRows(['非花非雾','霸天下','雄霸','土豆','唐家萨斯','诺克萨斯','德玛西亚','泽拉斯'])
				};
			}
			
			   <ListView  
						dataSource={this.state.dataSource}
						renderRow={(rowData)=>
							
							<Text>{rowData}</Text>
						}
				   />
		Navigator:导航条，实现页面跳转的核心,而使用他必须要实现他的俩个方法，
			initialRoute与 renderScene，initialRoute是用来初始化路由的，也就是初始化第一个要显示的界面的数据，
			renderScene是用来添加控件到Navigator上的。
			使用方式：看一个简单的使用方式。
			<Navigator
				initialRoute={{ title: 'My Initial Scene', index: 0 }}
				renderScene={(route, navigator) =>
				<MyScene
				title={route.title}

				// Function to call when a new scene should be displayed           
				onForward={ () => {    
					const nextIndex = route.index + 1;
					navigator.push({
						title: 'Scene ' + nextIndex,
						index: nextIndex,
						});
					}}

					// Function to call to go back to the previous scene
					onBack={() => {
					if (route.index > 0) {
						navigator.pop();
						}
				}}
				/>
				}
			/>
			也可以在initialRoute的时候指定要显示的页面，比如这样：
			       <Navigator
						style={{flex:1}}
						initialRoute={{name: 'FirstPage', component: FirstPage}}
						configureScene={this.configureScene}
						renderScene={this.renderScene}
						navigationBar={
						<Navigator.NavigationBar
							style={styles.navContainer}
							routeMapper={NavigationBarRouteMapper}/>}
					/>
					
		TouchableHighlight:添加控件或组件的监听事件。如果要加监听，那么必须在控件的外边包一对这个
		Alert：类似android中的AlertDialog，弹出一个对话框
		AndroidToast：react-native提供的Toast类，使用方式特别简单：
			使用方式：
			ToastAndroid.show("返回前一页!", ToastAndroid.SHORT);
		BackAndroid:用来捕捉android手机的返回键，进行自定义操作。
			使用方式：
			BackAndroid.addEventListener('hardwareBackPress', function() {
				if(_navigator == null){

					ToastAndroid.show("null",ToastAndroid.SHORT);
					return false;
				}
				if(_navigator.getCurrentRoutes().length === 1){

					ToastAndroid.show("===1",ToastAndroid.SHORT);
					return true;
				}

				ToastAndroid.show("退出",ToastAndroid.SHORT);
				_navigator.pop();
				return true;
			});
			
			其中的_navigator就是导航器的对象，他里边有一个保存界面的stack（栈），
			通过判断他的长度，判断是否有栈里边还有界面。
		
	4、如何把页面分离开来进行代码的书写
	
	在我们学习 的时候可能在一个js文件中写所有的代码，但是如果是真正的项目开发的话，肯定是要分开来写的
	，不同的模块或者不同的功能页面用不同的js，那么如何来进行分解呢。
	
	首先：项目最基本的index.android.js里边必须要进行注册操作。
import React, { Component } from 'react';
import {
  AppRegistry,
} from 'react-native';

//这个地方需要导入你所书写的组件的代码，组件的名称必须跟下边注册的组件名称相同，

AppRegistry.registerComponent('Demo1', () => Demo1);
	
	然后。就是分别书写其他的页面，然后使用的时候直接导入就可以使用了。
	跟android的自定义相比更加简单。
	后边我会提供代码。
	
	
	5、在编写自定义的js文件或者组件的时候，要注意类名前边必须要这样修饰：
	export default class ListViewItem  extends Component
	否则会报错。

	
	6、网络访问：
	网络访问使用的是 Fetch这个，
	而他的使用方式也是很简单，只要是分俩种，fetch('你的Url')这样一个参数默认是get请求，
	fetch('你的Url'，{
		 method: 'GET'
	});
	这个大括号里边是可以添加请求的方式，以及headers，请求参数等的。
	
	看一个详细的请求方式：
	getMoviesFromApiAsync() {
		return fetch('http://facebook.github.io/react-native/movies.json')
		.then((response) =>response.text())
		.then((responseJson) => {
			ToastAndroid.show(responseJson, ToastAndroid.SHORT);
			console.warn(responseJson);
			return responseJson;
		})
		.catch((error) => {
			console.error(error);
		});
	}
	fetch执行以候会返回一个Promise（预期的对象）对象，返回的数据在response（这是自己起的返回的数据的名称，可以随意修改）里，
	reponse.text(); //把返回的数据转换为文本
	reponse.json();//把返回的数据解析成对象，返回的就是一个包含所有属性的对象，可以直接使用,
	看下边：
	getMoviesFromApiAsync() {
    return fetch('http://facebook.github.io/react-native/movies.json')
      .then((respons) =>respons.json())
      .then((responseJson) => {
		ToastAndroid.show(responseJson.title, ToastAndroid.SHORT);
		 console.warn(responseJson.title);
        return responseJson.movies;
      })
      .catch((error) => {
        console.error(error);
      });
	}
	responseJson就是这个对象，title、movies就是其中的属性。
	
	7、处理触摸，点击等事件
	
	8、组件见传值的方式：
		如果是嵌套方式，那么直接通过this.props.(这个点后边跟你要传递的对象名)
		如果是是类似listView中嵌套item的话需要通过在构造方法中指定参数名称进行传递
		
	
	